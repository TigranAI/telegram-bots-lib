package ru.tigran.telegram.bots.api.model.dto

import ru.tigran.telegram.bots.util.anyNotNull

data class MessageUnsealed(
    val messageId: Long,
    val messageThreadId: Long?,
    val from: User?,
    val senderChat: Chat?,
    val senderBoostCount: Int?,
    val senderBusinessBot: User?,
    val date: Long,
    val businessConnectionId: Long?,
    val chat: Chat,
    val forwardOrigin: MessageOrigin?,
    val isTopicMessage: Boolean?,
    val isAutomaticForward: Boolean?,
    val replyToMessage: MessageUnsealed?,
    val externalReply: ExternalReplyInfo?,
    val quote: TextQuote?,
    val replyToStory: Story?,
    val viaBot: User?,
    val editDate: Long?,
    val hasProtectedContent: Boolean?,
    val isFromOffline: Boolean?,
    val mediaGroupId: String?,
    val authorSignature: String?,
    val text: String?,
    val entities: List<MessageEntity>?,
    val linkPreviewOptions: LinkPreviewOptions?,
    val effectId: String?,
    val animation: Animation?,
    val audio: Audio?,
    val document: Document?,
    val paidMedia: PaidMediaInfo?,
    val photo: List<PhotoSize>?,
    val sticker: Sticker?,
    val story: Story?,
    val video: Video?,
    val videoNote: VideoNode?,
    val voice: Voice?,
    val caption: String?,
    val captionEntities: List<MessageEntity>?,
    val showCaptionAboveMedia: Boolean?,
    val hasMediaSpoiler: Boolean?,
    val contact: Contact?,
    val dice: Dice?,
    val game: Game?,
    val poll: Poll?,
    val venue: Venue?,
    val location: Location?,
    val newChatMembers: List<User>?,
    val leftChatMember: User?,
    val newChatTitle: String?,
    val newChatPhoto: List<PhotoSize>?,
    val deleteChatPhoto: Boolean?,
    val groupChatCreated: Boolean?,
    val supergroupChatCreated: Boolean?,
    val channelChatCreated: Boolean?,
    val messageAutoDeleteTimerChanged: MessageAutoDeleteTimerChanged?,
    val migrateToChatId: Long?,
    val migrateFromChatId: Long?,
    val pinnedMessage: MessageUnsealed?,
    val invoice: Invoice?,
    val successfulPayment: SuccessfulPayment?,
    val refundedPayment: RefundedPayment?,
    val usersShared: UsersShared?,
    val chatShared: ChatShared?,
    val connectedWebsite: String?,
    val writeAccessAllowed: WriteAccessAllowed?,
    val passportData: PassportData?,
    val proximityAlertTriggered: ProximityAlertTriggered?,
    val boostAdded: ChatBoostAdded?,
    val chatBackgroundSet: ChatBackgroundUnsealed?,
    val forumTopicCreated: ForumTopicCreated?,
    val forumTopicEdited: ForumTopicEdited?,
    val forumTopicClosed: ForumTopicClosed?,
    val forumTopicReopened: ForumTopicReopened?,
    val generalForumTopicHidden: GeneralForumTopicHidden?,
    val generalTopicForumUnhidden: GeneralForumTopicUnhidden?,
    val giveawayCreated: GiveawayCreated?,
    val giveaway: Giveaway?,
    val giveawayWinners: GiveawayWinners?,
    val giveawayCompleted: GiveawayCompletedUnsealed?,
    val videoChatScheduled: VideoChatScheduled?,
    val videoChatStarted: VideoChatStarted?,
    val videoChatEnded: VideoChatEnded?,
    val videoChatParticipantsInvited: VideoChatParticipantsInvited?,
    val webAppData: WebAppData?,
    val replyMarkup: InlineKeyboardMarkup?,
) {
    fun sealed(): Message {
        if (anyNotNull(messageThreadId,
                from,
                senderChat,
                senderBoostCount,
                senderBusinessBot,
                businessConnectionId,
                forwardOrigin,
                isTopicMessage,
                isAutomaticForward,
                replyToMessage,
                externalReply,
                quote,
                replyToStory,
                viaBot,
                editDate,
                hasProtectedContent,
                isFromOffline,
                mediaGroupId,
                authorSignature,
                text,
                entities,
                linkPreviewOptions,
                effectId,
                animation,
                audio,
                document,
                paidMedia,
                photo,
                sticker,
                story,
                video,
                videoNote,
                voice,
                caption,
                captionEntities,
                showCaptionAboveMedia,
                hasMediaSpoiler,
                contact,
                dice,
                game,
                poll,
                venue,
                location,
                newChatMembers,
                leftChatMember,
                newChatTitle,
                newChatPhoto,
                deleteChatPhoto,
                groupChatCreated,
                supergroupChatCreated,
                channelChatCreated,
                messageAutoDeleteTimerChanged,
                migrateToChatId,
                migrateFromChatId,
                pinnedMessage,
                invoice,
                successfulPayment,
                refundedPayment,
                usersShared,
                chatShared,
                connectedWebsite,
                writeAccessAllowed,
                passportData,
                proximityAlertTriggered,
                boostAdded,
                chatBackgroundSet,
                forumTopicCreated,
                forumTopicEdited,
                forumTopicClosed,
                forumTopicReopened,
                generalForumTopicHidden,
                generalTopicForumUnhidden,
                giveawayCreated,
                giveaway,
                giveawayWinners,
                giveawayCompleted,
                videoChatScheduled,
                videoChatStarted,
                videoChatEnded,
                videoChatParticipantsInvited,
                webAppData,
                replyMarkup,
        )) {
            return Message.FullMessage(
                messageId = messageId,
                messageThreadId = messageThreadId,
                from = from,
                senderChat = senderChat,
                senderBoostCount = senderBoostCount,
                senderBusinessBot = senderBusinessBot,
                date = date,
                businessConnectionId = businessConnectionId,
                chat = chat,
                forwardOrigin = forwardOrigin,
                isTopicMessage = isTopicMessage,
                isAutomaticForward = isAutomaticForward,
                replyToMessage = replyToMessage?.sealed(),
                externalReply = externalReply,
                quote = quote,
                replyToStory = replyToStory,
                viaBot = viaBot,
                editDate = editDate,
                hasProtectedContent = hasProtectedContent,
                isFromOffline = isFromOffline,
                mediaGroupId = mediaGroupId,
                authorSignature = authorSignature,
                text = text,
                entities = entities,
                linkPreviewOptions = linkPreviewOptions,
                effectId = effectId,
                animation = animation,
                audio = audio,
                document = document,
                paidMedia = paidMedia,
                photo = photo,
                sticker = sticker,
                story = story,
                video = video,
                videoNote = videoNote,
                voice = voice,
                caption = caption,
                captionEntities = captionEntities,
                showCaptionAboveMedia = showCaptionAboveMedia,
                hasMediaSpoiler = hasMediaSpoiler,
                contact = contact,
                dice = dice,
                game = game,
                poll = poll,
                venue = venue,
                location = location,
                newChatMembers = newChatMembers,
                leftChatMember = leftChatMember,
                newChatTitle = newChatTitle,
                newChatPhoto = newChatPhoto,
                deleteChatPhoto = deleteChatPhoto,
                groupChatCreated = groupChatCreated,
                supergroupChatCreated = supergroupChatCreated,
                channelChatCreated = channelChatCreated,
                messageAutoDeleteTimerChanged = messageAutoDeleteTimerChanged,
                migrateToChatId = migrateToChatId,
                migrateFromChatId = migrateFromChatId,
                pinnedMessage = pinnedMessage?.sealed(),
                invoice = invoice,
                successfulPayment = successfulPayment,
                refundedPayment = refundedPayment,
                usersShared = usersShared,
                chatShared = chatShared,
                connectedWebsite = connectedWebsite,
                writeAccessAllowed = writeAccessAllowed,
                passportData = passportData,
                proximityAlertTriggered = proximityAlertTriggered,
                boostAdded = boostAdded,
                chatBackgroundSet = chatBackgroundSet?.sealed(),
                forumTopicCreated = forumTopicCreated,
                forumTopicEdited = forumTopicEdited,
                forumTopicClosed = forumTopicClosed,
                forumTopicReopened = forumTopicReopened,
                generalForumTopicHidden = generalForumTopicHidden,
                generalTopicForumUnhidden = generalTopicForumUnhidden,
                giveawayCreated = giveawayCreated,
                giveaway = giveaway,
                giveawayWinners = giveawayWinners,
                giveawayCompleted = giveawayCompleted?.sealed(),
                videoChatScheduled = videoChatScheduled,
                videoChatStarted = videoChatStarted,
                videoChatEnded = videoChatEnded,
                videoChatParticipantsInvited = videoChatParticipantsInvited,
                webAppData = webAppData,
                replyMarkup = replyMarkup,
            )
        }
        return Message.InaccessibleMessage(
            messageId = messageId,
            date = date,
            chat = chat,
        )
    }
}

sealed class Message {
    class InaccessibleMessage(
        val messageId: Long,
        val date: Long,
        val chat: Chat,
    ) : Message()

    class FullMessage(
        val messageId: Long,
        val messageThreadId: Long?,
        val from: User?,
        val senderChat: Chat?,
        val senderBoostCount: Int?,
        val senderBusinessBot: User?,
        val date: Long,
        val businessConnectionId: Long?,
        val chat: Chat,
        val forwardOrigin: MessageOrigin?,
        val isTopicMessage: Boolean?,
        val isAutomaticForward: Boolean?,
        val replyToMessage: Message?,
        val externalReply: ExternalReplyInfo?,
        val quote: TextQuote?,
        val replyToStory: Story?,
        val viaBot: User?,
        val editDate: Long?,
        val hasProtectedContent: Boolean?,
        val isFromOffline: Boolean?,
        val mediaGroupId: String?,
        val authorSignature: String?,
        val text: String?,
        val entities: List<MessageEntity>?,
        val linkPreviewOptions: LinkPreviewOptions?,
        val effectId: String?,
        val animation: Animation?,
        val audio: Audio?,
        val document: Document?,
        val paidMedia: PaidMediaInfo?,
        val photo: List<PhotoSize>?,
        val sticker: Sticker?,
        val story: Story?,
        val video: Video?,
        val videoNote: VideoNode?,
        val voice: Voice?,
        val caption: String?,
        val captionEntities: List<MessageEntity>?,
        val showCaptionAboveMedia: Boolean?,
        val hasMediaSpoiler: Boolean?,
        val contact: Contact?,
        val dice: Dice?,
        val game: Game?,
        val poll: Poll?,
        val venue: Venue?,
        val location: Location?,
        val newChatMembers: List<User>?,
        val leftChatMember: User?,
        val newChatTitle: String?,
        val newChatPhoto: List<PhotoSize>?,
        val deleteChatPhoto: Boolean?,
        val groupChatCreated: Boolean?,
        val supergroupChatCreated: Boolean?,
        val channelChatCreated: Boolean?,
        val messageAutoDeleteTimerChanged: MessageAutoDeleteTimerChanged?,
        val migrateToChatId: Long?,
        val migrateFromChatId: Long?,
        val pinnedMessage: Message?,
        val invoice: Invoice?,
        val successfulPayment: SuccessfulPayment?,
        val refundedPayment: RefundedPayment?,
        val usersShared: UsersShared?,
        val chatShared: ChatShared?,
        val connectedWebsite: String?,
        val writeAccessAllowed: WriteAccessAllowed?,
        val passportData: PassportData?,
        val proximityAlertTriggered: ProximityAlertTriggered?,
        val boostAdded: ChatBoostAdded?,
        val chatBackgroundSet: ChatBackground?,
        val forumTopicCreated: ForumTopicCreated?,
        val forumTopicEdited: ForumTopicEdited?,
        val forumTopicClosed: ForumTopicClosed?,
        val forumTopicReopened: ForumTopicReopened?,
        val generalForumTopicHidden: GeneralForumTopicHidden?,
        val generalTopicForumUnhidden: GeneralForumTopicUnhidden?,
        val giveawayCreated: GiveawayCreated?,
        val giveaway: Giveaway?,
        val giveawayWinners: GiveawayWinners?,
        val giveawayCompleted: GiveawayCompleted?,
        val videoChatScheduled: VideoChatScheduled?,
        val videoChatStarted: VideoChatStarted?,
        val videoChatEnded: VideoChatEnded?,
        val videoChatParticipantsInvited: VideoChatParticipantsInvited?,
        val webAppData: WebAppData?,
        val replyMarkup: InlineKeyboardMarkup?,
    ): Message()
}